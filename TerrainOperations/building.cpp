#include "terrainops.h"
#include <main/dragomath.h>
#include <MeshOperations/building.h>

namespace terrainops {
	void build_write_vertex_vbuff(
		float* out, std::stringstream* content, unsigned int format, long long* address,
		float x, float y, float z,
		float nx, float ny, float nz,
		float u, float v,
		unsigned int c,
		float tx, float ty, float tz,
		float bx, float by, float bz,
		float bc1, float bc2, float bc3
	) {
		if (format & VFX_POSITION_2D) {
			out[(*address)++] = x;
			out[(*address)++] = y;
		}
		if (format & VFX_POSITION_3D) {
			out[(*address)++] = x;
			out[(*address)++] = y;
			out[(*address)++] = z;
		}
		if (format & VFX_NORMAL) {
			out[(*address)++] = nx;
			out[(*address)++] = ny;
			out[(*address)++] = nz;
		}
		if (format & VFX_TEXCOORD) {
			out[(*address)++] = u;
			out[(*address)++] = v;
		}
		if (format & VFX_COLOUR) {
			((unsigned int*)out)[(*address)++] = c;
		}
		if (format & VFX_TANGENT) {
			out[(*address)++] = tx;
			out[(*address)++] = ty;
			out[(*address)++] = tz;
		}
		if (format & VFX_BITANGENT) {
			out[(*address)++] = bx;
			out[(*address)++] = by;
			out[(*address)++] = bz;
		}
		if (format & VFX_BARYCENTRIC) {
			out[(*address)++] = bc1;
			out[(*address)++] = bc2;
			out[(*address)++] = bc3;
		}
		if (format & VFX_SMALL_NORMAL) {
			nx = ADJUST(nx, 0.0f, 255.0f, -1.0f, 1.0f);
			ny = ADJUST(ny, 0.0f, 255.0f, -1.0f, 1.0f);
			nz = ADJUST(nz, 0.0f, 255.0f, -1.0f, 1.0f);
			((unsigned int*)out)[(*address)++] = (unsigned int)(nx + ny * 256.0 + nz * 65536.0);
		}
		if (format & VFX_SMALL_TANGENT) {
			tx = ADJUST(tx, 0.0f, 255.0f, -1.0f, 1.0f);
			ty = ADJUST(ty, 0.0f, 255.0f, -1.0f, 1.0f);
			tz = ADJUST(tz, 0.0f, 255.0f, -1.0f, 1.0f);
			((unsigned int*)out)[(*address)++] = (unsigned int)(tx + ty * 256.0 + tz * 65536.0);
		}
		if (format & VFX_SMALL_BITANGENT) {
			bx = ADJUST(bx, 0.0f, 255.0f, -1.0f, 1.0f);
			by = ADJUST(by, 0.0f, 255.0f, -1.0f, 1.0f);
			bz = ADJUST(bz, 0.0f, 255.0f, -1.0f, 1.0f);
			((unsigned int*)out)[(*address)++] = (unsigned int)(bx + by * 256.0 + bz * 65536.0);
		}
		if (format & VFX_SMALL_TEXCOORD) {
			u = floor(u * 255.0f);
			v = floor(v * 255.0f);
			((unsigned int*)out)[(*address)++] = (unsigned int)(u + v * 256.0);
		}
		if (format & VFX_SMALL_NORMAL_PAL) {
			nx = ADJUST(nx, 0.0f, 255.0f, -1.0f, 1.0f);
			ny = ADJUST(ny, 0.0f, 255.0f, -1.0f, 1.0f);
			nz = ADJUST(nz, 0.0f, 255.0f, -1.0f, 1.0f);
			u = floor(u * 255.0f);
			((unsigned int*)out)[(*address)++] = (unsigned int)(nx + ny * 256.0 + nz * 65536.0 + u * 16777216.0);
		}
	}

	void build_write_vertex_d3d(
		float* out, std::stringstream* content, unsigned int format, long long* address,
		float x, float y, float z,
		float nx, float ny, float nz,
		float u, float v,
		unsigned int c,
		float tx, float ty, float tz,
		float bx, float by, float bz,
		float bc1, float bc2, float bc3
	) {
		char line[160];
		sprintf_s(line, "9 %.1f %.1f %.5f %.3f %.3f %.3f %.6f %.6f %d %.3f\r\n", x, y, z, nx, ny, nz, u, v, c & 0x00ffffff, (c >> 24) / 255.0);
		*content << std::string(line);
	}

	void build_setup_vbuff(float* out) {

	}

	void build_cleanup_vbuff(float* out, long long* length, int) {
		*length = (long long)FLOATS2BYTES(*length);
	}

	void build_setup_d3d(float* out, std::stringstream* content) {

	}

	void build_cleanup_d3d(float* out, std::stringstream* content, long long* length, int vertices) {
		std::stringstream header, footer;
		header << std::format("100\r\n{}\r\n0 4\r\n", vertices + 2);
		footer << "0\r\n";

		std::string result = header.str() + content->str() + footer.str();
		*length = (int)result.length();
		result.copy((char*)out, *length);
	}

	void build_setup_obj(float* out, std::stringstream* content) {
		*content << "# Terrain generated by dragonite's terrain editor: https://dragonite.itch.io/terrain\r\n" <<
			"mtllib terrian.mtl\r\n" <<
			"usemtl terrain\t\n\r\n";
	}

	void build_cleanup_obj(float* out, std::stringstream* content, long long* length, int vertices) {
		std::string result = content->str();
		long long bytes = (int)result.length();
		*length = (int)result.length();
		result.copy((char*)out, *length);
	}
}